1. to find all movies with rating =3
 db.movie.find({rating:3},{_id:0});
2. to find all mivies with rating =3 and price=260
 db.movie.find({$and:[{rating:3,price:260}]},{_id:0,name:1,rating:1});
3. to find all movies with rating >3 and sort them ratingwise
4. to find all movies with rating >3 and rating < 6
db.movie.find({$and:[{rating:{$gt:3}},{rating:{$lt:6}}]},{_id:0,name:1,rating:1})
5.to find all movies with rating >3 and rating < 6 
6.to find all movies with rating >3 and rating < 6 
7. to find all movies with price = either 200 or 340 or 240
 db.movie.find({$or:[{price:200},{price:300},{price:240}]},{_id:0,name:1,rating:1});
8.to find all movies with price is not  either 200 or 340 or 240
 db.movie.find({$nor:[{price:200},{price:300},{price:240}]},{_id:0,name:1,rating:1,price:1})
9. to find all movies with odd rating
 db.movie.find({rating:{$mod:[2,0]}},{_id:0,name:1,rating:1});
10.to find all movies with ticket_no is either 300 or 210
db.movie.find({$or:[{ticket_no:300},{ticket_no:210}]},{_id:0,name:1,rating:1,ticket_no:1});
11.to find all movies in which 3 actors are there in the list
 db.movie.find({actor:{$size:3}},{_id:0,name:1,rating:1,actor:1});
12. find all movies in which Amitabh has acted
db.movie.find({actor:'Amitabh'},{_id:0,name:1,rating:1,actor:1});


13. Write a MongoDB query to display all the documents in the collection restaurants
db.restaurent.find();

14. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant. 
db.restaurent.find({},{restaurent_id:1,name:1,borough:1,cuisine:1,_id:0});

15. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant. 
db.restaurent.find({},{restaurent_id:1,name:1,borough:1,cuisine:1,_id:0});

16. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant. 
db.restaurent.find({},{restaurent_id:1,name:1,borough:1,"address.zipcode":1,_id:0});

17. Write a MongoDB query to display all the restaurant which is in the borough Bronx
db.restaurent.find({borough:'Bronx'},{_id:0})

18. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx. 
db.restaurent.find({borough:'Bronx'},{_id:0}).limit(5)

19.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx. 
db.restaurent.find({borough:'Bronx'},{_id:0}).limit(5).skip(5)

20. Write a MongoDB query to find the restaurants who achieved a score more than 90. 
 db.restaurent.find({'grades.score':{$gt:90}},{_id:0,name:1,'grades.score':1});

21. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
  db.restaurent.find({'grades.score':{$gt:80,$lt:100}},{_id:0,name:1,'grades.score':1});
22. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
db.restaurent.find({"address.coord.0":{$lt:-95.754168}},{_id:0,"address.coord":1})

23. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 
'American' and their grade score more than 70 and latitude less than -65.754168. 

db.restaurent.find({cuisine:{$nin:['American']},"address.coord.0":{$lt:-65.754168}},{_id:0,name:1,"address.coord":1,cuisine:1})

24. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 
'American' and achieved a score more than 70 and located in the longitude less than -
65.754168.
 db.restaurent.find({cuisine:{$nin:['American']},"address.coord":{$lt:-65.754168}},{_id:0,name:1,
"address.coord":1,cuisine:1}).pretty()
25. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 
'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The 
document must be displayed according to the cuisine in descending order. 

db.restaurent.find({cuisine:/^[^American].*/,"grades.grade":'A',borough:'Brooklyn'},{_id:0,name:1,cuisine:1,"grades.grade":1}.sort({cuisine:1})

26. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those 
restaurants which contain 'Wil' as first three letters for its name. 
db.restaurent.find({name:/^Wil.*/},{_id:0,restaurant_id:1,name:1,borough:1,cuisine:1})

27. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those 
restaurants which contain 'ces' as last three letters for its name. 
db.restaurent.find({name:/.*ces$/},{_id:0,restaurant_id:1,name:1,borough:1,cuisine:1})

28. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those 
restaurants which contain 'Reg' as three letters somewhere in its name. 
db.restaurent.find({name:/.*Reg.*/},{_id:0,restaurant_id:1,name:1,borough:1,cuisine:1})

29. Write a MongoDB query to find the restaurants which belong to the borough Bronx and 
prepared either American or Chinese dish. 
db.restaurent.find({borough:'Bronx',cuisine:{'American','Chinese'}},{_id:0,name:1,cuisine:1,borough:1})

30. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those 
restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn. 
 db.restaurent.find({borough:{$in:['Staten Island','Queens','Bronxor Broooklyn']}},{_id:0,name:1,cuisine:1,borough:1})

31. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those 
restaurants which are not belonging to the borough Staten Island or Queens or Bronxor 
Brooklyn. 
32. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those 
restaurants which achieved a score which is not more than 10. 
db.restaurent.find({"grades.score":{$gt:10}},{_id:0,name:1,cuisine:1,borough:1})

33. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those 
restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins 
with letter 'Wil'. 
db.restaurent.find({$or:[{name:/^Wil.*/},{cuisine:{$nin:['American','Chinese']}}]},{_id:0,restaurant_id:1,name:1,borough:1,cuisine:1})

34. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants 
which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" 
among many of survey dates

db.restaurent.find({$and:[{"grades.grade":"A"},{"grades.score":9},{"grades.date":ISODate('2014-08-11T00:00:00Z')}]},{}).pretty()

35. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate  "2014-08-11T00:00:00Z". 
db.restaurent.find({$and:[{"grades.1.grade":"A"},{"grades.1.score":9},{"grades.1.date":ISODate('2014-08-11T00:00:00Z')}]},{})
36. Write a MongoDB query to find the restaurant Id, name, address and geographical 
location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52
db.restaurent.find("address.coord.1":{$gt:42 ,$lt:52},{_id:0,restaurant_id:1,name:1,borough:1,cuisine:1})

37. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
db.restaurent.find({}.{_id:0,name:1}).sort({name:1})
 
38. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns. 
db.restaurent.find({}.{_id:0,name:1}).sort({name:-1})

39. Write a MongoDB query to arranged the name of the cuisine in ascending order and for 
that same cuisine borough should be in descending order. 
db.restaurent.find({}.{_id:0,name:1}).sort({cuisine:1},{borough:-1})

40. Write a MongoDB query to know whether all the addresses contains the street or not. 
db.restaurent.find({"address.street":{$exists:true}},{_id:0,name:1,"address.street":1})

41. Write a MongoDB query which will select all documents in the restaurants collection 
where the coord field value is Double. 
db.restaurent.find({"address.coord":{$size:2}},{_id:0,"address.coord":1})

42. Write a MongoDB query which will select the restaurant Id, name and grades for those 
restaurants which returns 0 as a remainder after dividing the score by 7. 
db.restaurent.find({mod("address.score",7):0}},{_id:0,"addess.score":1})

43. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name. 
db.restaurent.find({name:/.*mon.*/},{_id:0,name:1,"address.coord":1}) 

44. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.
db.restaurent.find({name:/^Mad.*/},{_id:0,name:1,"address.coord":1}) 

 
